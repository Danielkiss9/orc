generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Account {
    id                String   @id @default(uuid())
    userId            String
    provider          String
    type              String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    Cluster       Cluster[]

    @@index([email])
}

model Cluster {
    id             String        @id @default(uuid())
    name           String
    token          String?       @unique
    registrationId String        @unique
    version        String
    nodes          Int?
    score          Int?
    lastSeen       DateTime?
    userId         String
    status         ClusterStatus @default(ACTIVE)
    user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    snapshots      Snapshot[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@index([userId])
    @@index([status])
    @@index([lastSeen])
}

model Snapshot {
    id                String             @id @default(uuid())
    orphanedResources OrphanedResource[]
    createdAt         DateTime           @default(now())
    createdBy         String?
    clusterId         String
    cluster           Cluster            @relation(fields: [clusterId], references: [id])

    @@index([clusterId])
    @@index([createdAt])
}

model OrphanedResource {
    id           String                 @id @default(uuid())
    snapshotId   String
    snapshot     Snapshot               @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
    kind         String
    name         String
    namespace    String?
    uid          String
    createdAt    DateTime               @default(now())
    age          DateTime?
    discoveredAt DateTime               @default(now())
    deletedAt    DateTime?
    owner        String?
    reason       String?
    cost         Float?
    spec         String?
    status       OrphanedResourceStatus @default(PENDING)

    @@unique([snapshotId, uid])
    @@index([snapshotId])
    @@index([status])
    @@index([kind])
    @@index([namespace])
    @@index([discoveredAt])
    @@index([deletedAt])
}

enum OrphanedResourceStatus {
    PENDING
    DELETED
    IGNORED
}

enum ClusterStatus {
    ACTIVE
    PENDING
    INACTIVE
    DELETED
}
